generator zod {
    provider = "zod-prisma-types"
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            Int        @id @default(autoincrement())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    locations     Location[]
    role          Role       @default(Advertiser)
    access        Access     @default(Pending)
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Location {
    id            Int             @id @default(autoincrement())
    user          User            @relation(fields: [userId], references: [id])
    userId        Int
    category      Category        @default(Undefined)
    name          String
    address       String
    lat           Float
    long          Float
    phone         Int
    website       String
    summary       String
    description   String
    thumbnail     String
    access        Access          @default(Pending)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    Advertisement Advertisement[]

    @@index([userId])
}

model Advertisement {
    id          Int      @id @default(autoincrement())
    location    Location @relation(fields: [locationId], references: [id])
    locationId  Int
    title       String
    description String
    media       String
    start       DateTime
    end         DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([locationId])
}

model PointOfInterest {
    id          Int      @id @default(autoincrement())
    category_id Category @default(Undefined)
    title       String
    address     String
    lat         Float
    long        Float
    media       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

enum Role {
    Administrator
    Advertiser
}

enum Category {
    Undefined
    Restaurant
    Bar
    Theater
    Park
    Church
    Cinema
    Museum
    Cafe
}

enum Access {
    Pending
    Granted
    Denied
}
